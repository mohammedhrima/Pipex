
	
				close(fd[0]);
				dup2(fd[0], STDIN_FILENO);
				dup2(fd[1], STDOUT_FILENO);
				dup2(in, STDIN_FILENO);
				dup2(out, STDOUT_FILENO);
				exit(127);
				exit(EXIT_FAILURE);
			arr1 = NULL;
			close(fd[0]);
			close(fd[1]);
			close(in);
			cmd1 = NULL;
			cmd1 = arr1[0];
			dup2(fd[0], STDIN_FILENO);
			dup2(fd[1], STDOUT_FILENO);
			else
			exit(-1);
			free(arr1);
			free(arr2);
			free(cmd1);
			free(cmd2);
			ft_putendl_fd(ft_strjoin("command not found: ", arr1[0]), 2);
			ft_putendl_fd(ft_strjoin("command not found: ", arr2[0]), 2);
			ft_putendl_fd(ft_strjoin("no such file or directory: ", argv[1]), 2);
			if (!cmd2)
			if (execve(cmd1, arr1, NULL) == -1)
			if (execve(cmd2, arr2, NULL) == -1)
			if (i > 1)
			if(i == argc - 1)
			perror("Error: ");
			return (arr[i]);
			return cmd2;
			{
			}
		// free(paths);
		arr1 = ft_split2(argv[i + 1], ' ', 3);
		arr2 = ft_split2(argv[i + 2], ' ', 3);
		cmd1 = cmd_path(arr1[0], paths);
		cmd2 = NULL;
		cmd2 = cmd_path(arr2[0], paths);
		cmd2 = ft_strjoin(paths[i], cmd1);
		else if (pid1 == 0)
		else if (pid1 > 0)
		else if (pid2 == 0)
		else if (pid2 > 0)
		free(cmd2);
		i += 2;
		i++;
		if (!cmd1 && in >= 0)
		if (!cmd2)
		if (access(cmd2, F_OK) == 0 && access(cmd2, X_OK) == 0)
		if (ft_strstr(arr[i], str))
		if (in < 0)
		if (pid1 < 0)
		if (pid2 < 0)
		if (pipe(fd) < 0)
		in = open(argv[1], O_RDONLY, 0777);
		out = open(argv[argc - 1], O_WRONLY | O_TRUNC | O_CREAT, 0777);
		paths = ft_split(grep(envp, "PATH"), ':');
		pid1 = fork();
		pid2 = fork();
		return cmd0;
		return cmd1;
		{
		}
	char **arr1;
	char **arr2;
	char **paths;
	char *cmd1;
	char *cmd2;
	cmd1 = ft_strjoin("/", cmd0);
	cmd2 = NULL;
	exit_code = 0;
	i = 0;
	if (access(cmd0, F_OK) == 0 && access(cmd0, X_OK) == 0)
	if (access(cmd1, F_OK) == 0 && access(cmd1, X_OK) == 0)
	int exit_code;
	int fd[2];
	int i = 1;
	int i;
	int in;
	int out;
	int status;
	pid_t pid1;
	pid_t pid2;
	return (WEXITSTATUS(status));
	return (cmd2);
	return NULL;
	waitpid(pid1, &status, 0);
	waitpid(pid2, &status, 0);
	while (arr[i])
	while (i < argc)
	while (paths && cmd0 && paths[i])
	{
	}
#include "pipex.h"
char *cmd_path(char *cmd0, char **paths)
char *grep(char *arr[], char *str)
int main(int argc, char **argv, char *envp[])
{
}
